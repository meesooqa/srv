// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"net/http"
	"sync"
)

// HandlerMock is a mock implementation of srv.Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked srv.Handler
//		mockedHandler := &HandlerMock{
//			HandleFunc: func(mux *http.ServeMux)  {
//				panic("mock out the Handle method")
//			},
//		}
//
//		// use mockedHandler in code that requires srv.Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(mux *http.ServeMux)

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Mux is the mux argument value.
			Mux *http.ServeMux
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *HandlerMock) Handle(mux *http.ServeMux) {
	if mock.HandleFunc == nil {
		panic("HandlerMock.HandleFunc: method is nil but Handler.Handle was just called")
	}
	callInfo := struct {
		Mux *http.ServeMux
	}{
		Mux: mux,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	mock.HandleFunc(mux)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedHandler.HandleCalls())
func (mock *HandlerMock) HandleCalls() []struct {
	Mux *http.ServeMux
} {
	var calls []struct {
		Mux *http.ServeMux
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}

// ResetHandleCalls reset all the calls that were made to Handle.
func (mock *HandlerMock) ResetHandleCalls() {
	mock.lockHandle.Lock()
	mock.calls.Handle = nil
	mock.lockHandle.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *HandlerMock) ResetCalls() {
	mock.lockHandle.Lock()
	mock.calls.Handle = nil
	mock.lockHandle.Unlock()
}
