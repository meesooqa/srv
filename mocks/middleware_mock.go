// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"net/http"
	"sync"
)

// MiddlewareMock is a mock implementation of srv.Middleware.
//
//	func TestSomethingThatUsesMiddleware(t *testing.T) {
//
//		// make and configure a mocked srv.Middleware
//		mockedMiddleware := &MiddlewareMock{
//			HandleFunc: func(next http.Handler) http.Handler {
//				panic("mock out the Handle method")
//			},
//		}
//
//		// use mockedMiddleware in code that requires srv.Middleware
//		// and then make assertions.
//
//	}
type MiddlewareMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(next http.Handler) http.Handler

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Next is the next argument value.
			Next http.Handler
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *MiddlewareMock) Handle(next http.Handler) http.Handler {
	if mock.HandleFunc == nil {
		panic("MiddlewareMock.HandleFunc: method is nil but Middleware.Handle was just called")
	}
	callInfo := struct {
		Next http.Handler
	}{
		Next: next,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(next)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedMiddleware.HandleCalls())
func (mock *MiddlewareMock) HandleCalls() []struct {
	Next http.Handler
} {
	var calls []struct {
		Next http.Handler
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}

// ResetHandleCalls reset all the calls that were made to Handle.
func (mock *MiddlewareMock) ResetHandleCalls() {
	mock.lockHandle.Lock()
	mock.calls.Handle = nil
	mock.lockHandle.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *MiddlewareMock) ResetCalls() {
	mock.lockHandle.Lock()
	mock.calls.Handle = nil
	mock.lockHandle.Unlock()
}
